/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/creator-roles': {
    /** Get a list of creator positions (jobs). */
    get: operations['creator-roles_list'];
  };
  '/creators': {
    /** Get a list of game creators. */
    get: operations['creators_list'];
  };
  '/creators/{id}': {
    /** Get details of the creator. */
    get: operations['creators_read'];
  };
  '/developers': {
    /** Get a list of game developers. */
    get: operations['developers_list'];
  };
  '/developers/{id}': {
    /** Get details of the developer. */
    get: operations['developers_read'];
  };
  '/games': {
    /** Get a list of games. */
    get: operations['games_list'];
  };
  '/games/{game_pk}/additions': {
    /** Get a list of DLC's for the game, GOTY and other editions, companion apps, etc. */
    get: operations['games_additions_list'];
  };
  '/games/{game_pk}/development-team': {
    /** Get a list of individual creators that were part of the development team. */
    get: operations['games_development-team_list'];
  };
  '/games/{game_pk}/game-series': {
    /** Get a list of games that are part of the same series. */
    get: operations['games_game-series_list'];
  };
  '/games/{game_pk}/parent-games': {
    /** Get a list of parent games for DLC's and editions. */
    get: operations['games_parent-games_list'];
  };
  '/games/{game_pk}/screenshots': {
    /** Get screenshots for the game. */
    get: operations['games_screenshots_list'];
  };
  '/games/{game_pk}/stores': {
    /** Get links to the stores that sell the game. */
    get: operations['games_stores_list'];
  };
  '/games/{id}': {
    /** Get details of the game. */
    get: operations['games_read'];
  };
  '/games/{id}/achievements': {
    /** Get a list of game achievements. */
    get: operations['games_achievements_read'];
  };
  '/games/{id}/movies': {
    /** Get a list of game trailers. */
    get: operations['games_movies_read'];
  };
  '/games/{id}/reddit': {
    /** Get a list of most recent posts from the game's subreddit. */
    get: operations['games_reddit_read'];
  };
  '/games/{id}/suggested': {
    /** Get a list of visually similar games, available only for business and enterprise API users. */
    get: operations['games_suggested_read'];
  };
  '/games/{id}/twitch': {
    /** Get streams on Twitch associated with the game, available only for business and enterprise API users. */
    get: operations['games_twitch_read'];
  };
  '/games/{id}/youtube': {
    /** Get videos from YouTube associated with the game, available only for business and enterprise API users. */
    get: operations['games_youtube_read'];
  };
  '/genres': {
    /** Get a list of video game genres. */
    get: operations['genres_list'];
  };
  '/genres/{id}': {
    /** Get details of the genre. */
    get: operations['genres_read'];
  };
  '/platforms': {
    /** Get a list of video game platforms. */
    get: operations['platforms_list'];
  };
  '/platforms/lists/parents': {
    /**
     * Get a list of parent platforms.
     * @description For instance, for PS2 and PS4 the “parent platform” is PlayStation.
     */
    get: operations['platforms_lists_parents_list'];
  };
  '/platforms/{id}': {
    /** Get details of the platform. */
    get: operations['platforms_read'];
  };
  '/publishers': {
    /** Get a list of video game publishers. */
    get: operations['publishers_list'];
  };
  '/publishers/{id}': {
    /** Get details of the publisher. */
    get: operations['publishers_read'];
  };
  '/stores': {
    /** Get a list of video game storefronts. */
    get: operations['stores_list'];
  };
  '/stores/{id}': {
    /** Get details of the store. */
    get: operations['stores_read'];
  };
  '/tags': {
    /** Get a list of tags. */
    get: operations['tags_list'];
  };
  '/tags/{id}': {
    /** Get details of the tag. */
    get: operations['tags_read'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Position: {
      /** ID */
      id?: number;
      /** Name */
      name?: string;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
    };
    Person: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /**
       * Image
       * Format: uri
       */
      image?: string;
      /**
       * Image background
       * Format: uri
       */
      image_background?: string;
      /** Games count */
      games_count?: number;
    };
    PersonSingle: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /**
       * Image
       * Format: uri
       */
      image?: string;
      /**
       * Image background
       * Format: uri
       */
      image_background?: string;
      /** Description */
      description?: string;
      /** Games count */
      games_count?: number;
      /** Reviews count */
      reviews_count?: number;
      /**
       * Rating
       * Format: decimal
       */
      rating?: string;
      /** Rating top */
      rating_top?: number;
      /**
       * Updated
       * Format: date-time
       */
      updated?: string;
    };
    Developer: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /** Games count */
      games_count?: number;
      /**
       * Image background
       * Format: uri
       */
      image_background?: string;
    };
    DeveloperSingle: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /** Games count */
      games_count?: number;
      /**
       * Image background
       * Format: uri
       */
      image_background?: string;
      /** Description */
      description?: string;
    };
    Game: {
      /** ID */
      id?: number;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /** Name */
      name?: string;
      /**
       * Released
       * Format: date
       */
      released?: string;
      /** TBA */
      tba?: boolean;
      /**
       * Background image
       * Format: uri
       */
      background_image?: string;
      /** Rating */
      rating: number;
      /** Rating top */
      rating_top?: number;
      /** Ratings */
      ratings?: Record<string, never>;
      /** Ratings count */
      ratings_count?: number;
      /** Reviews text count */
      reviews_text_count?: string;
      /** Added */
      added?: number;
      /** Added by status */
      added_by_status?: Record<string, never>;
      /** Metacritic */
      metacritic?: number;
      /**
       * Playtime
       * @description in hours
       */
      playtime?: number;
      /** Suggestions count */
      suggestions_count?: number;
      /**
       * Updated
       * Format: date-time
       */
      updated?: string;
      esrb_rating?: {
        id?: number;
        /** @enum {string} */
        slug?: 'everyone' | 'everyone-10-plus' | 'teen' | 'mature' | 'adults-only' | 'rating-pending';
        /** @enum {string} */
        name?: 'Everyone' | 'Everyone 10+' | 'Teen' | 'Mature' | 'Adults Only' | 'Rating Pending';
      } | null;
      platforms?: {
        platform?: {
          id?: number;
          slug?: string;
          name?: string;
        };
        released_at?: string | null;
        requirements?: {
          minimum?: string;
          recommended?: string;
        } | null;
      }[];
    };
    GamePersonList: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /**
       * Image
       * Format: uri
       */
      image?: string;
      /**
       * Image background
       * Format: uri
       */
      image_background?: string;
      /** Games count */
      games_count?: number;
    };
    /**
     * @example {
     *   "image": "@image.jpg",
     *   "hidden": false
     * }
     */
    ScreenShot: {
      /** ID */
      id?: number;
      /**
       * Image
       * Format: uri
       * @description An image file with size up to 20 MB.
       */
      image?: string;
      /**
       * Hidden
       * @description Set image as hidden or visible.
       * @default false
       */
      hidden?: boolean;
      /** Width */
      width?: number;
      /** Height */
      height?: number;
    };
    GameStoreFull: {
      /** ID */
      id?: number;
      /** Game id */
      game_id?: string;
      /** Store id */
      store_id?: string;
      /**
       * Url
       * Format: uri
       */
      url: string;
    };
    GamePlatformMetacritic: {
      /** Metascore */
      metascore?: number;
      /** Url */
      url?: string;
    };
    GameSingle: {
      /** ID */
      id?: number;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /** Name */
      name?: string;
      /** Name original */
      name_original?: string;
      /** Description */
      description?: string;
      /** Metacritic */
      metacritic?: number;
      metacritic_platforms?: readonly components['schemas']['GamePlatformMetacritic'][];
      /**
       * Released
       * Format: date
       */
      released?: string;
      /** TBA */
      tba?: boolean;
      /**
       * Updated
       * Format: date-time
       */
      updated?: string;
      /**
       * Background image
       * Format: uri
       */
      background_image?: string;
      /** Background image additional */
      background_image_additional?: string;
      /**
       * Website
       * Format: uri
       */
      website?: string;
      /** Rating */
      rating: number;
      /** Rating top */
      rating_top?: number;
      /** Ratings */
      ratings?: Record<string, never>;
      /** Reactions */
      reactions?: Record<string, never>;
      /** Added */
      added?: number;
      /** Added by status */
      added_by_status?: Record<string, never>;
      /**
       * Playtime
       * @description in hours
       */
      playtime?: number;
      /** Screenshots count */
      screenshots_count?: number;
      /** Movies count */
      movies_count?: number;
      /** Creators count */
      creators_count?: number;
      /** Achievements count */
      achievements_count?: number;
      /** Parent achievements count */
      parent_achievements_count?: string;
      /**
       * Reddit url
       * @description For example "https://www.reddit.com/r/uncharted/" or "uncharted"
       */
      reddit_url?: string;
      /** Reddit name */
      reddit_name?: string;
      /** Reddit description */
      reddit_description?: string;
      /**
       * Reddit logo
       * Format: uri
       */
      reddit_logo?: string;
      /** Reddit count */
      reddit_count?: number;
      /** Twitch count */
      twitch_count?: string;
      /** Youtube count */
      youtube_count?: string;
      /** Reviews text count */
      reviews_text_count?: string;
      /** Ratings count */
      ratings_count?: number;
      /** Suggestions count */
      suggestions_count?: number;
      alternative_names?: readonly string[];
      /**
       * Metacritic url
       * @description For example "http://www.metacritic.com/game/playstation-4/the-witcher-3-wild-hunt"
       */
      metacritic_url?: string;
      /** Parents count */
      parents_count?: number;
      /** Additions count */
      additions_count?: number;
      /** Game series count */
      game_series_count?: number;
      esrb_rating?: {
        id?: number;
        /** @enum {string} */
        slug?: 'everyone' | 'everyone-10-plus' | 'teen' | 'mature' | 'adults-only' | 'rating-pending';
        /** @enum {string} */
        name?: 'Everyone' | 'Everyone 10+' | 'Teen' | 'Mature' | 'Adults Only' | 'Rating Pending';
      } | null;
      platforms?: {
        platform?: {
          id?: number;
          slug?: string;
          name?: string;
        };
        released_at?: string | null;
        requirements?: {
          minimum?: string;
          recommended?: string;
        } | null;
      }[];
    };
    ParentAchievement: {
      /** ID */
      id?: number;
      /** Name */
      name?: string;
      /** Description */
      description?: string;
      /**
       * Image
       * Format: uri
       */
      image?: string;
      /**
       * Percent
       * Format: decimal
       */
      percent?: string;
    };
    Movie: {
      /** ID */
      id?: number;
      /** Name */
      name?: string;
      /**
       * Preview
       * Format: uri
       */
      preview?: string;
      /** Data */
      data?: Record<string, never>;
    };
    Reddit: {
      /** ID */
      id?: number;
      /** Name */
      name?: string;
      /** Text */
      text?: string;
      /**
       * Image
       * Format: uri
       */
      image?: string;
      /**
       * Url
       * Format: uri
       */
      url?: string;
      /** Username */
      username?: string;
      /**
       * Username url
       * Format: uri
       */
      username_url?: string;
      /**
       * Created
       * Format: date-time
       */
      created?: string;
    };
    Twitch: {
      /** ID */
      id?: number;
      /** External id */
      external_id?: number;
      /** Name */
      name?: string;
      /** Description */
      description?: string;
      /**
       * Created
       * Format: date-time
       */
      created?: string;
      /**
       * Published
       * Format: date-time
       */
      published?: string;
      /**
       * Thumbnail
       * Format: uri
       */
      thumbnail?: string;
      /** View count */
      view_count?: number;
      /** Language */
      language?: string;
    };
    Youtube: {
      /** ID */
      id?: number;
      /** External id */
      external_id?: string;
      /** Channel id */
      channel_id?: string;
      /** Channel title */
      channel_title?: string;
      /** Name */
      name?: string;
      /** Description */
      description?: string;
      /**
       * Created
       * Format: date-time
       */
      created?: string;
      /** View count */
      view_count?: number;
      /** Comments count */
      comments_count?: number;
      /** Like count */
      like_count?: number;
      /** Dislike count */
      dislike_count?: number;
      /** Favorite count */
      favorite_count?: number;
      /** Thumbnails */
      thumbnails?: Record<string, never>;
    };
    Genre: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /** Games count */
      games_count?: number;
      /**
       * Image background
       * Format: uri
       */
      image_background?: string;
    };
    GenreSingle: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /** Games count */
      games_count?: number;
      /**
       * Image background
       * Format: uri
       */
      image_background?: string;
      /** Description */
      description?: string;
    };
    Platform: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /** Games count */
      games_count?: number;
      /**
       * Image background
       * Format: uri
       */
      image_background?: string;
      /**
       * Image
       * Format: uri
       */
      image?: string | null;
      /** Year start */
      year_start?: number | null;
      /** Year end */
      year_end?: number | null;
    };
    PlatformParentSingle: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      platforms: components['schemas']['Platform'][];
    };
    PlatformSingle: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /** Games count */
      games_count?: number;
      /**
       * Image background
       * Format: uri
       */
      image_background?: string;
      /** Description */
      description?: string;
      /**
       * Image
       * Format: uri
       */
      image?: string | null;
      /** Year start */
      year_start?: number | null;
      /** Year end */
      year_end?: number | null;
    };
    Publisher: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /** Games count */
      games_count?: number;
      /**
       * Image background
       * Format: uri
       */
      image_background?: string;
    };
    PublisherSingle: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /** Games count */
      games_count?: number;
      /**
       * Image background
       * Format: uri
       */
      image_background?: string;
      /** Description */
      description?: string;
    };
    Store: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /** Domain */
      domain?: string | null;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /** Games count */
      games_count?: number;
      /**
       * Image background
       * Format: uri
       */
      image_background?: string;
    };
    StoreSingle: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /** Domain */
      domain?: string | null;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /** Games count */
      games_count?: number;
      /**
       * Image background
       * Format: uri
       */
      image_background?: string;
      /** Description */
      description?: string;
    };
    Tag: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /** Games count */
      games_count?: number;
      /**
       * Image background
       * Format: uri
       */
      image_background?: string;
      /** Language */
      language?: string;
    };
    TagSingle: {
      /** ID */
      id?: number;
      /** Name */
      name: string;
      /**
       * Slug
       * Format: slug
       */
      slug?: string;
      /** Games count */
      games_count?: number;
      /**
       * Image background
       * Format: uri
       */
      image_background?: string;
      /** Description */
      description?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  /** Get a list of creator positions (jobs). */
  'creator-roles_list': {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['Position'][];
          };
        };
      };
    };
  };
  /** Get a list of game creators. */
  creators_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['Person'][];
          };
        };
      };
    };
  };
  /** Get details of the creator. */
  creators_read: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PersonSingle'];
        };
      };
    };
  };
  /** Get a list of game developers. */
  developers_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['Developer'][];
          };
        };
      };
    };
  };
  /** Get details of the developer. */
  developers_read: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Developer. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['DeveloperSingle'];
        };
      };
    };
  };
  /** Get a list of games. */
  games_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
        /** @description Search query. */
        search?: string;
        /** @description Disable fuzziness for the search query. */
        search_precise?: boolean;
        /** @description Mark the search query as exact. */
        search_exact?: boolean;
        /** @description Filter by parent platforms, for example: `1,2,3`. */
        parent_platforms?: string;
        /** @description Filter by platforms, for example: `4,5`. */
        platforms?: string;
        /** @description Filter by stores, for example: `5,6`. */
        stores?: string;
        /** @description Filter by developers, for example: `1612,18893` or `valve-software,feral-interactive`. */
        developers?: string;
        /** @description Filter by publishers, for example: `354,20987` or `electronic-arts,microsoft-studios`. */
        publishers?: string;
        /** @description Filter by genres, for example: `4,51` or `action,indie`. */
        genres?: string;
        /** @description Filter by tags, for example: `31,7` or `singleplayer,multiplayer`. */
        tags?: string;
        /** @description Filter by creators, for example: `78,28` or `cris-velasco,mike-morasky`. */
        creators?: string;
        /** @description Filter by a release date, for example: `2010-01-01,2018-12-31.1960-01-01,1969-12-31`. */
        dates?: string;
        /** @description Filter by an update date, for example: `2020-12-01,2020-12-31`. */
        updated?: string;
        /** @description Filter by platforms count, for example: `1`. */
        platforms_count?: number;
        /** @description Filter by a metacritic rating, for example: `80,100`. */
        metacritic?: string;
        /** @description Exclude games from a particular collection, for example: `123`. */
        exclude_collection?: number;
        /** @description Exclude additions. */
        exclude_additions?: boolean;
        /** @description Exclude games which have additions. */
        exclude_parents?: boolean;
        /** @description Exclude games which included in a game series. */
        exclude_game_series?: boolean;
        /** @description Exclude stores, for example: `5,6`. */
        exclude_stores?: string;
        /** @description Available fields: `name`, `released`, `added`, `created`, `updated`, `rating`, `metacritic`. You can reverse the sort order adding a hyphen, for example: `-released`. */
        ordering?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['Game'][];
          };
        };
      };
    };
  };
  /** Get a list of DLC's for the game, GOTY and other editions, companion apps, etc. */
  games_additions_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
      path: {
        game_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['Game'][];
          };
        };
      };
    };
  };
  /** Get a list of individual creators that were part of the development team. */
  'games_development-team_list': {
    parameters: {
      query?: {
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
      path: {
        game_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['GamePersonList'][];
          };
        };
      };
    };
  };
  /** Get a list of games that are part of the same series. */
  'games_game-series_list': {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
      path: {
        game_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['Game'][];
          };
        };
      };
    };
  };
  /** Get a list of parent games for DLC's and editions. */
  'games_parent-games_list': {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
      path: {
        game_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['Game'][];
          };
        };
      };
    };
  };
  /** Get screenshots for the game. */
  games_screenshots_list: {
    parameters: {
      query?: {
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
      path: {
        game_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['ScreenShot'][];
          };
        };
      };
    };
  };
  /** Get links to the stores that sell the game. */
  games_stores_list: {
    parameters: {
      query?: {
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
      path: {
        game_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['GameStoreFull'][];
          };
        };
      };
    };
  };
  /** Get details of the game. */
  games_read: {
    parameters: {
      path: {
        /** @description An ID or a slug identifying this Game. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GameSingle'];
        };
      };
    };
  };
  /** Get a list of game achievements. */
  games_achievements_read: {
    parameters: {
      path: {
        /** @description An ID or a slug identifying this Game. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ParentAchievement'];
        };
      };
    };
  };
  /** Get a list of game trailers. */
  games_movies_read: {
    parameters: {
      path: {
        /** @description An ID or a slug identifying this Game. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Movie'];
        };
      };
    };
  };
  /** Get a list of most recent posts from the game's subreddit. */
  games_reddit_read: {
    parameters: {
      path: {
        /** @description An ID or a slug identifying this Game. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Reddit'];
        };
      };
    };
  };
  /** Get a list of visually similar games, available only for business and enterprise API users. */
  games_suggested_read: {
    parameters: {
      path: {
        /** @description An ID or a slug identifying this Game. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GameSingle'];
        };
      };
    };
  };
  /** Get streams on Twitch associated with the game, available only for business and enterprise API users. */
  games_twitch_read: {
    parameters: {
      path: {
        /** @description An ID or a slug identifying this Game. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Twitch'];
        };
      };
    };
  };
  /** Get videos from YouTube associated with the game, available only for business and enterprise API users. */
  games_youtube_read: {
    parameters: {
      path: {
        /** @description An ID or a slug identifying this Game. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Youtube'];
        };
      };
    };
  };
  /** Get a list of video game genres. */
  genres_list: {
    parameters: {
      query?: {
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['Genre'][];
          };
        };
      };
    };
  };
  /** Get details of the genre. */
  genres_read: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Genre. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GenreSingle'];
        };
      };
    };
  };
  /** Get a list of video game platforms. */
  platforms_list: {
    parameters: {
      query?: {
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['Platform'][];
          };
        };
      };
    };
  };
  /**
   * Get a list of parent platforms.
   * @description For instance, for PS2 and PS4 the “parent platform” is PlayStation.
   */
  platforms_lists_parents_list: {
    parameters: {
      query?: {
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['PlatformParentSingle'][];
          };
        };
      };
    };
  };
  /** Get details of the platform. */
  platforms_read: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Platform. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PlatformSingle'];
        };
      };
    };
  };
  /** Get a list of video game publishers. */
  publishers_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['Publisher'][];
          };
        };
      };
    };
  };
  /** Get details of the publisher. */
  publishers_read: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Publisher. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PublisherSingle'];
        };
      };
    };
  };
  /** Get a list of video game storefronts. */
  stores_list: {
    parameters: {
      query?: {
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['Store'][];
          };
        };
      };
    };
  };
  /** Get details of the store. */
  stores_read: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Store. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StoreSingle'];
        };
      };
    };
  };
  /** Get a list of tags. */
  tags_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            count: number;
            /** Format: uri */
            next?: string | null;
            /** Format: uri */
            previous?: string | null;
            results: components['schemas']['Tag'][];
          };
        };
      };
    };
  };
  /** Get details of the tag. */
  tags_read: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Tag. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TagSingle'];
        };
      };
    };
  };
}
